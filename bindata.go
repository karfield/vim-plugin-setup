// Code generated by go-bindata.
// sources:
// vim-configs/_common.vimrc
// vim-configs/airline.vimrc
// vim-configs/copy_n_paste.vimrc
// vim-configs/reopen.vimrc
// vim-configs/taglist.vimrc
// vim-configs/tags.vimrc
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vimConfigs_commonVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x51\x3d\x8f\xd4\x30\x10\xad\xe3\x5f\x31\x4a\x75\x27\xcc\x91\x45\x2b\x41\x71\xb9\x02\x51\xa2\x6b\x40\xa2\x40\x14\x13\x67\xb2\xb6\xd6\x1f\x91\x3d\xcb\x9e\x84\xf8\xef\x4c\xe2\xdc\xad\x94\x68\x8a\xbc\x37\xe3\xf1\xf3\x7b\xaa\x10\x03\xd3\x0b\x5f\xdd\xc8\xb6\xff\xdc\xad\x44\x31\x39\x79\x9f\xa6\xa9\xff\x54\xb1\x1b\xa9\x72\xfd\x47\xb5\x32\x31\xc5\x4b\xfd\xf3\x58\xb8\x30\xf2\xa5\x48\x6f\x1d\xb6\xe9\x6a\xc2\xd8\x34\x20\x5f\x0b\xdf\x05\xc2\xdd\x8c\x99\x1d\xfa\x7b\x30\x29\x04\x8c\x23\xb8\x08\xf5\x14\x78\x17\xe9\xa1\xee\x72\xd1\x14\xc2\x6c\x6c\x85\x78\xe1\xe4\xe2\x48\x91\x37\x15\xd0\x96\xb0\x2c\x7a\xa3\xcc\xd6\x6e\x37\x90\x66\x76\x29\x96\xfe\xd4\xe9\xe7\xf7\x45\xed\x58\xdb\x69\xdf\x69\xe9\x71\xa7\xdd\x51\xbf\x3b\xea\xbb\x4e\x5f\x0f\xfa\xe7\xb1\xde\xb7\x2e\x67\x1c\xaa\x29\x38\x14\x4e\x73\x7f\xac\xad\x34\xf1\x8e\xb1\x6e\xda\x5c\xab\x04\xbd\xcc\xf2\xb0\xe5\xb8\xb2\x0e\x9e\x53\x0e\xe8\xc1\x30\xe5\x30\x9c\x7a\xf1\x8b\x9a\xf6\x47\xc6\x58\xc4\x0a\x91\x0c\x03\x9a\xf3\x29\xa7\x4b\x1c\xab\xfa\x1b\xee\x47\xcc\x67\xa5\x4c\xf2\x29\x17\x63\x29\x10\x9c\x13\x59\x4f\xf9\xd5\xfb\x6b\xc6\xb9\x69\x47\x57\x70\xf0\x04\x0b\xaa\x51\x88\x93\x43\x26\x3c\xab\xb7\x20\x02\xb2\xb1\x4d\xb3\xc5\xb0\x22\x17\x4f\x30\x64\xb9\x8d\xb8\x3c\xac\x83\x2b\xcd\x2e\x50\x7f\x58\x46\x57\x08\x0b\xd6\x70\x28\x75\xd7\xa2\x4e\x94\x1b\xea\xab\xe3\x9a\x92\xd7\x12\x60\xe6\x9b\x8e\x2f\xaf\x33\x1f\xbe\x92\x27\x16\x61\x96\xe2\x12\xf4\x1f\x57\x2e\xe8\x95\x6a\x33\x05\x9c\xc5\x4b\x79\x51\xbd\x64\x46\x97\x0b\x4c\x29\x03\x8d\x8e\x45\x99\x92\xb4\xea\xd4\xaf\xdf\x52\x8f\xdf\x68\xe2\xa7\x1b\x79\x77\x2f\xb5\x27\xff\xfe\x93\xda\x93\x6d\x2b\xb5\x27\x1f\x9f\xa4\x36\x52\xfd\x0f\x00\x00\xff\xff\x39\xa1\x79\x7b\xfb\x02\x00\x00")

func vimConfigs_commonVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigs_commonVimrc,
		"vim-configs/_common.vimrc",
	)
}

func vimConfigs_commonVimrc() (*asset, error) {
	bytes, err := vimConfigs_commonVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/_common.vimrc", size: 763, mode: os.FileMode(420), modTime: time.Unix(1451142938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsAirlineVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xcb\x4e\xc4\x20\x14\x86\xf7\x3c\x05\xe2\x62\xc6\x68\x6d\xc6\x44\x33\x21\x61\xa5\x1b\x77\x3e\x40\x93\x86\x32\xd0\x92\xd0\x43\xe5\xe2\x38\x6f\xef\x81\x4e\xba\x70\x61\x22\x0b\xda\xff\xf4\xfb\xcf\xad\x8c\x06\xfd\x99\x6d\xd0\xcd\xe2\xf2\x68\x81\xd3\xd1\xa6\x29\x0f\x8f\xca\xcf\xed\xe0\x2c\x8c\xed\x97\x9d\x1b\x69\x03\xbe\x6b\xc2\x08\x1a\x32\x34\x51\x05\xbb\xa4\x2a\x6f\x6f\xda\xc1\x42\x3b\xc8\x38\xa1\xaa\x21\x0d\xa7\x8d\x58\x23\x53\x4a\x4b\xe4\x6d\xfb\x67\xf2\xa8\x13\x1d\xb3\x35\x1e\x92\x78\x07\xe5\x21\x7a\x27\x93\xec\xa8\xf1\xa1\xa3\x1f\xfe\xac\x2b\xc7\xa7\xc3\xb1\xb2\x1a\x99\x13\x26\x11\x39\x99\xe6\x48\x98\x2b\x7e\xbe\x71\x7d\xbc\xcc\x83\x77\x91\x0a\xba\x33\x12\xd4\x65\x57\x5d\xa9\x7f\xf5\xe2\xe9\xf9\xa5\x0a\x63\x9d\x53\x93\x0c\xf1\x5e\xc4\xe4\x78\x47\x1f\xf0\x01\x8a\x77\x2b\xaa\xc3\x2c\xbe\xcb\xdd\xa0\x41\x79\xe7\xc3\x16\xff\x55\x9c\xac\xc5\xaf\xa3\xf4\xcb\xd6\x44\x99\xa6\xb4\x70\x20\xc4\x1a\x3a\xc9\xb8\x67\x38\x63\x8f\x4b\x04\x74\xb3\x3b\x42\xf1\x14\x73\xe4\x19\xe4\xac\x11\x8d\x97\x98\xf4\xbc\x67\x55\x5f\x09\xf4\x6e\x80\xa0\xec\x4d\x86\xb3\x85\x0e\x58\xfd\x58\xce\x7f\x96\x57\x78\xfc\x47\xd6\x90\xf5\xfe\x09\x00\x00\xff\xff\xcd\x6f\xe5\x64\x05\x02\x00\x00")

func vimConfigsAirlineVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsAirlineVimrc,
		"vim-configs/airline.vimrc",
	)
}

func vimConfigsAirlineVimrc() (*asset, error) {
	bytes, err := vimConfigsAirlineVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/airline.vimrc", size: 517, mode: os.FileMode(420), modTime: time.Unix(1451189302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsCopy_n_pasteVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x52\x52\x70\xce\x2f\xa8\x54\x50\x53\x08\x48\x2c\x2e\x49\xe5\x52\x02\x0a\xb8\xe5\x17\x29\xf8\x26\x26\x73\x95\xe5\x26\x16\x28\xd8\x38\xeb\x26\xdb\x29\x54\x5a\x25\x27\xe6\xe4\x28\x14\x57\x02\xd5\xe4\x6a\x28\x15\x24\x25\x03\x35\x29\xe9\x28\xa4\xa7\x96\x14\xa5\xa6\x6b\x28\xc5\x28\x29\x69\x6a\xda\x38\x07\xd9\x71\xe5\x41\x35\x15\xdb\x29\x40\xf5\x20\x94\xe8\x20\x19\x50\x00\xb2\x0e\xa6\x09\x10\x00\x00\xff\xff\xf5\xb1\x5d\xb6\x86\x00\x00\x00")

func vimConfigsCopy_n_pasteVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsCopy_n_pasteVimrc,
		"vim-configs/copy_n_paste.vimrc",
	)
}

func vimConfigsCopy_n_pasteVimrc() (*asset, error) {
	bytes, err := vimConfigsCopy_n_pasteVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/copy_n_paste.vimrc", size: 134, mode: os.FileMode(420), modTime: time.Unix(1451142934, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsReopenVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8c\x31\x0e\xc2\x30\x10\x04\x7b\xbf\x62\xb1\x50\x48\xe8\xe8\x81\x82\x17\x20\x6a\x9a\x13\x39\x27\x87\x9c\xbb\x28\xb1\x05\x05\x8f\xc7\x11\x69\x68\x56\x9a\xd1\x68\x9d\x47\xb0\x09\x13\xdb\xc8\x5a\xe0\x99\x87\x11\xc9\x90\x7a\x46\xa4\x39\x61\xb4\x59\x92\x98\xe2\xd5\xb3\xae\x9d\x68\x07\x42\x90\xc8\x4e\x02\x7a\x9a\x6b\x4f\x39\xd9\x63\x68\x7d\xe3\x00\xca\xb8\xe4\x70\x63\x6a\xaf\x56\x1e\xf6\x28\x51\x14\xe5\xda\xef\xee\xde\x37\x38\xe3\x80\xaa\xfa\x53\xc7\xd3\x8a\xdb\x02\x1f\xf0\x9b\xe1\xd5\xa6\x81\xe2\x06\xdd\x92\x2c\x52\x5b\x09\xee\xb7\xdf\x00\x00\x00\xff\xff\x6e\xce\x4c\x36\xb7\x00\x00\x00")

func vimConfigsReopenVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsReopenVimrc,
		"vim-configs/reopen.vimrc",
	)
}

func vimConfigsReopenVimrc() (*asset, error) {
	bytes, err := vimConfigsReopenVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/reopen.vimrc", size: 183, mode: os.FileMode(420), modTime: time.Unix(1451142877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsTaglistVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x41\x6b\xf2\x40\x10\xbd\xe7\x57\x2c\x39\x7d\xdf\x41\xd0\x9e\x4a\x31\x82\x04\xad\x85\x8a\xa5\x49\xf1\xb8\xac\x71\x1a\x87\x4e\x66\x42\x76\x43\xb4\xbf\xbe\x1b\x8b\xd6\x4d\x7b\x09\xe1\xbd\x79\x6f\xde\xcb\x24\x56\xef\xd2\x28\x67\x4a\x42\xeb\xd4\xbf\x5d\x8b\xe4\x90\xff\x47\xb1\x8a\x62\x02\xa7\xf2\x1e\xd7\x99\x34\x4e\xe7\xa7\x1a\x92\x98\x4d\x05\x71\x74\x65\xde\x2c\xe8\x57\x2c\x0f\x4e\x6f\x91\xf7\xd2\x25\x93\xe8\x47\x96\x4a\x55\x1b\xaf\x5c\x4a\x53\x19\x17\x50\x8b\x63\xff\xdc\x30\x9d\xae\xba\x9b\x7d\x4b\x24\xf0\x2a\xda\xeb\x79\xeb\x44\xa7\x24\x16\x92\xf1\xed\xc4\x82\xcd\xee\x32\x93\x0a\xb5\x15\x87\x0e\xd9\x41\x3a\xbd\x06\x6e\x43\x78\x6d\x8e\x59\xbb\xeb\x71\xfd\xe4\xa0\xb2\xc9\x64\x3c\xa0\x75\x6e\x4a\xfd\x0c\x5c\xba\x43\x72\x17\x90\x7d\xd5\x0c\xb9\x24\x48\x09\x8b\x8f\x30\xcf\x39\xe7\xa6\x06\x0e\xe1\x73\x72\x5f\x53\x67\x40\x50\xb8\x90\xfc\xb3\x65\x10\xf7\xd1\x20\x2f\xa5\x68\x6d\x6f\x91\x4b\xe9\x77\xff\xde\xf1\xd2\x48\x01\xd6\x7e\xdb\xcd\xa9\x33\x27\x1b\xba\xf8\x2f\xbc\x82\xfe\x46\x83\xb6\x1e\xdf\xe2\xde\xf7\x9c\xdc\x0f\x7b\xae\xa4\xc1\xcf\xcb\x49\xbd\x48\xcd\x09\x8d\xbd\xfe\x27\xfe\x35\x1d\x51\xc4\x95\xa9\xd5\x34\x1d\x65\x23\x9a\xa9\x87\xb3\x7a\x5a\x34\x33\x8f\x74\xb3\x2e\xfa\x0a\x00\x00\xff\xff\x41\xb5\x86\x33\x5b\x02\x00\x00")

func vimConfigsTaglistVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsTaglistVimrc,
		"vim-configs/taglist.vimrc",
	)
}

func vimConfigsTaglistVimrc() (*asset, error) {
	bytes, err := vimConfigsTaglistVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/taglist.vimrc", size: 603, mode: os.FileMode(420), modTime: time.Unix(1451142977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsTagsVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x2a\x4e\x2d\x51\x28\x49\x4c\x2f\xb6\x05\x11\xd6\x60\x6e\x62\x69\x49\x7e\x72\x46\x4a\x66\x11\x17\x97\x92\x82\x63\x4e\x66\x62\x31\x48\x85\x42\x71\x6a\x4e\x6a\x72\x49\x7e\x91\x02\x90\xef\xac\xeb\xc3\x95\x97\x9b\x58\xa0\x60\xe3\xac\x1b\xac\x9b\x67\xa7\x60\x55\x52\xac\x60\x93\xac\x5b\x64\x67\x9b\x5a\x51\x90\x98\x97\xa2\xa1\x64\x93\x5c\x9e\x5f\x94\x62\xa7\xa4\x69\x93\x5c\x64\x07\xc2\x5c\x80\x00\x00\x00\xff\xff\xa8\x29\x51\x02\x6c\x00\x00\x00")

func vimConfigsTagsVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsTagsVimrc,
		"vim-configs/tags.vimrc",
	)
}

func vimConfigsTagsVimrc() (*asset, error) {
	bytes, err := vimConfigsTagsVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/tags.vimrc", size: 108, mode: os.FileMode(420), modTime: time.Unix(1451137132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vim-configs/_common.vimrc": vimConfigs_commonVimrc,
	"vim-configs/airline.vimrc": vimConfigsAirlineVimrc,
	"vim-configs/copy_n_paste.vimrc": vimConfigsCopy_n_pasteVimrc,
	"vim-configs/reopen.vimrc": vimConfigsReopenVimrc,
	"vim-configs/taglist.vimrc": vimConfigsTaglistVimrc,
	"vim-configs/tags.vimrc": vimConfigsTagsVimrc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"vim-configs": &bintree{nil, map[string]*bintree{
		"_common.vimrc": &bintree{vimConfigs_commonVimrc, map[string]*bintree{}},
		"airline.vimrc": &bintree{vimConfigsAirlineVimrc, map[string]*bintree{}},
		"copy_n_paste.vimrc": &bintree{vimConfigsCopy_n_pasteVimrc, map[string]*bintree{}},
		"reopen.vimrc": &bintree{vimConfigsReopenVimrc, map[string]*bintree{}},
		"taglist.vimrc": &bintree{vimConfigsTaglistVimrc, map[string]*bintree{}},
		"tags.vimrc": &bintree{vimConfigsTagsVimrc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

