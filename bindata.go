// Code generated by go-bindata.
// sources:
// vim-configs/airline.vimrc
// vim-configs/common.vimrc
// vim-configs/copy_n_paste.vimrc
// vim-configs/go.vimrc
// vim-configs/netrw.vimrc
// vim-configs/reopen.vimrc
// vim-configs/tagbar.vimrc
// vim-configs/taglist.vimrc
// vim-configs/tags.vimrc
// vim-configs/ycm.vimrc
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vimConfigsAirlineVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x51\x4d\x8b\xdb\x30\x10\xbd\xeb\x57\xa8\x6a\x21\x29\xad\x2d\x52\x68\x09\x06\x43\xa0\xb9\xe4\x50\x28\x3d\xf4\x64\x30\xb2\x2c\xc7\xa2\xfa\xaa\x46\x6e\x1a\x4a\xff\xfb\x8e\x95\xac\xb3\x6c\xf6\xb2\x3a\x48\x7a\x33\xef\xe9\xcd\x8c\x18\xdd\x45\xf5\x7b\xd2\x51\x55\xf4\xa8\xd3\x38\x75\xa5\xf4\x96\x77\x46\xbb\x23\xff\xa3\x6d\x21\x74\xc4\xbb\x22\x8c\xcc\xd4\xc9\x15\x20\xa3\x0e\x09\xd1\xdb\x37\xbc\xd3\x8e\x77\x02\x46\x44\xf6\x57\xaf\x23\x2d\x02\x7d\xf7\xef\xe7\xe1\xdb\xfe\xf0\xe3\x3f\x4f\x36\x60\x22\x4c\x30\xf6\x77\x51\xf4\xa2\xd2\x78\xa7\xe8\x98\x52\x80\x8a\xf3\x27\xee\xc1\x9f\x54\x76\xe5\x83\x77\x09\x4a\x4c\x2d\x0f\xe5\x08\xa2\x92\x6b\x07\x49\x18\x53\x66\xfb\xe0\x43\x7f\x3b\x76\xca\xf5\xb7\x42\x73\xed\x2f\xd8\xdc\x37\x09\x2a\xd1\xe3\xa4\x67\x8f\xfa\xe0\xa4\x77\xe0\x8d\x48\xa2\x41\xd7\xd8\xd0\xef\x8f\x65\x55\xe3\x66\x9b\xb9\x0a\x39\x3d\x3e\x52\x4f\x69\x28\xb6\x84\x99\x59\x5f\x2d\xbc\x16\xce\xb6\xf3\x06\x68\x4d\x57\x83\x70\xf2\xbc\xca\xaa\xd4\x7e\xf5\xf5\xa7\xcf\x5f\x32\x18\xb4\x31\x72\x14\x11\x3e\xd4\x90\x4c\xd5\xd0\x8f\x78\x38\x59\x35\x17\xaa\x8a\xb6\xfe\x3b\xef\x05\x0a\xa4\x37\x3e\x2e\xf1\x67\xe6\xe4\x62\x7e\x6d\xa5\x5d\x66\xd8\xe6\x89\x61\x09\x1b\x42\xf4\x40\x47\x01\x6b\x86\x3d\xb6\xf8\x97\x0e\xd5\xec\x3d\xa1\xb8\x66\x31\x54\x93\x13\x56\x21\x15\xce\x90\x94\x5d\xb3\x8c\xaf\x0c\xd4\x2e\x84\x9a\xb2\xbd\x88\x27\xed\x1a\xc7\x72\x72\x5e\xaf\x19\xde\xcc\xc7\x3f\xd2\x03\xb9\xec\x0f\x01\x00\x00\xff\xff\xb8\xbf\x5a\x02\x87\x02\x00\x00")

func vimConfigsAirlineVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsAirlineVimrc,
		"vim-configs/airline.vimrc",
	)
}

func vimConfigsAirlineVimrc() (*asset, error) {
	bytes, err := vimConfigsAirlineVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/airline.vimrc", size: 647, mode: os.FileMode(436), modTime: time.Unix(1451232590, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsCommonVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x51\x3d\x8f\xd4\x30\x10\xad\xe3\x5f\x31\x4a\x75\x27\xcc\x91\x45\x2b\x41\x71\xb9\x02\x51\xa2\x6b\x40\xa2\x40\x14\x13\x67\xb2\xb6\xd6\x1f\x91\x3d\xcb\x9e\x84\xf8\xef\x4c\xe2\xdc\xad\x94\x68\x8a\xbc\x37\xe3\xf1\xf3\x7b\xaa\x10\x03\xd3\x0b\x5f\xdd\xc8\xb6\xff\xdc\xad\x44\x31\x39\x79\x9f\xa6\xa9\xff\x54\xb1\x1b\xa9\x72\xfd\x47\xb5\x32\x31\xc5\x4b\xfd\xf3\x58\xb8\x30\xf2\xa5\x48\x6f\x1d\xb6\xe9\x6a\xc2\xd8\x34\x20\x5f\x0b\xdf\x05\xc2\xdd\x8c\x99\x1d\xfa\x7b\x30\x29\x04\x8c\x23\xb8\x08\xf5\x14\x78\x17\xe9\xa1\xee\x72\xd1\x14\xc2\x6c\x6c\x85\x78\xe1\xe4\xe2\x48\x91\x37\x15\xd0\x96\xb0\x2c\x7a\xa3\xcc\xd6\x6e\x37\x90\x66\x76\x29\x96\xfe\xd4\xe9\xe7\xf7\x45\xed\x58\xdb\x69\xdf\x69\xe9\x71\xa7\xdd\x51\xbf\x3b\xea\xbb\x4e\x5f\x0f\xfa\xe7\xb1\xde\xb7\x2e\x67\x1c\xaa\x29\x38\x14\x4e\x73\x7f\xac\xad\x34\xf1\x8e\xb1\x6e\xda\x5c\xab\x04\xbd\xcc\xf2\xb0\xe5\xb8\xb2\x0e\x9e\x53\x0e\xe8\xc1\x30\xe5\x30\x9c\x7a\xf1\x8b\x9a\xf6\x47\xc6\x58\xc4\x0a\x91\x0c\x03\x9a\xf3\x29\xa7\x4b\x1c\xab\xfa\x1b\xee\x47\xcc\x67\xa5\x4c\xf2\x29\x17\x63\x29\x10\x9c\x13\x59\x4f\xf9\xd5\xfb\x6b\xc6\xb9\x69\x47\x57\x70\xf0\x04\x0b\xaa\x51\x88\x93\x43\x26\x3c\xab\xb7\x20\x02\xb2\xb1\x4d\xb3\xc5\xb0\x22\x17\x4f\x30\x64\xb9\x8d\xb8\x3c\xac\x83\x2b\xcd\x2e\x50\x7f\x58\x46\x57\x08\x0b\xd6\x70\x28\x75\xd7\xa2\x4e\x94\x1b\xea\xab\xe3\x9a\x92\xd7\x12\x60\xe6\x9b\x8e\x2f\xaf\x33\x1f\xbe\x92\x27\x16\x61\x96\xe2\x12\xf4\x1f\x57\x2e\xe8\x95\x6a\x33\x05\x9c\xc5\x4b\x79\x51\xbd\x64\x46\x97\x0b\x4c\x29\x03\x8d\x8e\x45\x99\x92\xb4\xea\xd4\xaf\xdf\x52\x8f\xdf\x68\xe2\xa7\x1b\x79\x77\x2f\xb5\x27\xff\xfe\x93\xda\x93\x6d\x2b\xb5\x27\x1f\x9f\xa4\x36\x52\xfd\x0f\x00\x00\xff\xff\x39\xa1\x79\x7b\xfb\x02\x00\x00")

func vimConfigsCommonVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsCommonVimrc,
		"vim-configs/common.vimrc",
	)
}

func vimConfigsCommonVimrc() (*asset, error) {
	bytes, err := vimConfigsCommonVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/common.vimrc", size: 763, mode: os.FileMode(436), modTime: time.Unix(1451224119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsCopy_n_pasteVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x52\x52\x70\xce\x2f\xa8\x54\x50\x53\x08\x48\x2c\x2e\x49\xe5\x52\x02\x0a\xb8\xe5\x17\x29\xf8\x26\x26\x73\x95\xe5\x26\x16\x28\xd8\x38\xeb\x26\xdb\x29\x54\x5a\x25\x27\xe6\xe4\x28\x14\x57\x02\xd5\xe4\x6a\x28\x15\x24\x25\x03\x35\x29\xe9\x28\xa4\xa7\x96\x14\xa5\xa6\x6b\x28\xc5\x28\x29\x69\x6a\xda\x38\x07\xd9\x71\xe5\x41\x35\x15\xdb\x29\x40\xf5\x20\x94\xe8\x20\x19\x50\x00\xb2\x0e\xa6\x09\x10\x00\x00\xff\xff\xf5\xb1\x5d\xb6\x86\x00\x00\x00")

func vimConfigsCopy_n_pasteVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsCopy_n_pasteVimrc,
		"vim-configs/copy_n_paste.vimrc",
	)
}

func vimConfigsCopy_n_pasteVimrc() (*asset, error) {
	bytes, err := vimConfigsCopy_n_pasteVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/copy_n_paste.vimrc", size: 134, mode: os.FileMode(436), modTime: time.Unix(1451224119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsGoVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x88\x9c\x56\x20\x69\xb7\x6b\xd1\x16\x3b\x0c\xdb\x65\xc0\x86\x6d\xf7\x40\xb6\x69\x99\x80\x2c\x7a\x12\x95\x20\xfb\xfa\x51\x8a\xd3\x38\x6d\xe2\x6d\xd8\xa1\x85\x23\x3d\x3e\xf2\x3d\x92\x5a\xc2\xfb\x80\x3f\x13\x05\xbc\x07\x4b\xd2\xa5\xea\xb6\xe6\xfe\xae\x35\x42\xdd\xdd\x96\xfa\xb5\xe5\xc5\x72\xb1\x58\x42\x44\x81\x96\x03\xe8\x6f\xa7\x9f\xf6\xde\xf2\xa6\x23\xdb\x39\xfd\x93\x4d\x9b\x7c\x2d\xc4\x3e\xc2\x23\xbc\xbb\x04\xe8\x51\x3a\x6e\xae\x5e\x47\x09\xa9\x96\xab\xd7\x3c\x60\x30\xc2\xe1\x2a\xa0\x4a\xe4\x9a\x4d\xad\x05\x48\x30\xe4\x47\x26\x2d\xdb\x32\x98\x24\xbc\xa6\x7e\xe0\x20\xa7\xd0\xb6\x17\x85\xf7\xbd\xf1\x8d\x42\x97\x96\x0f\x80\x78\xd0\xda\xf1\x2e\x02\x86\x90\x33\x66\xd1\xd2\x21\x68\x04\x8c\x11\x2b\x10\x86\x86\xa2\xa9\x1c\x02\xc9\xfd\x39\x6d\x6b\xc8\x6d\x22\x39\xf4\xe2\xf6\xc7\x3a\x3e\x8c\xe8\x5c\x4c\xa1\x62\x0f\xd1\x6c\xf1\x3c\x34\xdf\xe6\xd3\x97\x51\xaa\xdf\x93\xb7\x50\x05\x2d\x0c\x03\x98\x56\xf4\xff\xc0\x51\xf2\xe9\x9e\x53\x80\xe8\x69\x18\x94\x4b\xe9\x07\x67\xf6\xb7\x96\x9d\xf1\xf6\x96\x83\x3d\xa5\xc8\x17\xd9\x4b\xbf\x39\x12\x3d\xc2\xdb\x9c\xe7\x13\x43\x40\x67\x04\x1b\xe8\xcd\x30\x28\x69\x5c\x98\x04\x1f\x55\xc4\x8f\xfd\x80\xd9\x45\xaf\x17\xf0\xf0\x19\x4d\x83\xe1\x29\xc0\xc3\x57\x97\xec\xd3\x1b\xcb\xeb\x90\xfc\xcd\x2c\xb8\x9a\x80\x4b\x9f\xe6\xe1\x32\x81\x0b\x46\xb9\x82\x76\x07\x74\x3d\x41\xd7\xbc\xd5\x31\xb1\x38\xcf\x4f\x93\x08\xf2\x2d\xdf\x64\x03\xbe\xa1\x37\x3d\x96\x3e\x53\xa3\x8d\xa3\x96\xd4\x9d\xe4\x35\xa0\x1c\xd6\x29\xc4\x3c\x07\x3a\x4d\xe0\x71\x07\x19\x3d\x9b\x05\xa7\x0e\x15\xf2\x92\xe7\x8b\x9a\x5f\x08\xd5\x6e\xdc\x1a\x2f\x6a\x7d\xc3\xf5\xf3\x90\xed\x38\x34\xaf\xd2\xce\x26\xb2\xcd\x24\x93\x52\xcd\x8b\xb7\xdb\x73\xf4\x5a\x1d\x13\xaa\x8d\xd3\xea\x2e\xc5\x9d\xb3\x63\xbb\x16\x53\x15\x21\x7c\x14\xa2\x87\xe4\x29\xef\xfe\x5d\x83\xb5\x33\xba\xa7\xfa\xbd\x02\xf2\xa3\x55\xc7\x0c\x2b\xe8\x38\xd0\x2f\xf6\x92\xbf\xb3\x5e\x53\xad\x2e\x09\x2f\xe3\xfc\x17\xca\xf5\x35\x39\xaf\x2d\x0e\x8e\xae\x8d\xcb\x31\x66\xfb\x22\xe6\xa4\x7f\x36\x4c\xfe\x64\xc3\xa1\x8d\x2a\x7a\xdc\xac\xf9\x2e\x54\x2f\xba\x30\x06\x15\xca\xef\xfa\xf8\xa8\x75\x8e\xa2\x3e\x12\xad\x52\xea\xaa\xb7\xa6\xc6\x08\xbb\x8e\xea\x0e\x28\x82\xbe\x55\x0e\x7b\x1d\x53\xdd\xd7\x6a\x5f\xf2\x4b\xce\xf3\x6f\xfe\x4d\xed\x7b\x66\x8c\xa7\x1a\x0a\x65\xde\x90\xff\x69\xd2\xeb\x6d\xfb\x1d\x00\x00\xff\xff\x7e\x46\x9d\x9d\x72\x06\x00\x00")

func vimConfigsGoVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsGoVimrc,
		"vim-configs/go.vimrc",
	)
}

func vimConfigsGoVimrc() (*asset, error) {
	bytes, err := vimConfigsGoVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/go.vimrc", size: 1650, mode: os.FileMode(436), modTime: time.Unix(1451232650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsNetrwVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\x3d\x4f\xc3\x30\x10\x06\xe0\xdd\xbf\xe2\xd4\x09\x06\x5a\x3e\x36\x2b\x8d\x90\xba\x56\x0c\x80\xc4\x58\xb9\xe9\x8b\x73\xc2\xbd\x84\xf3\x95\xd0\x7f\x4f\x93\x8a\x40\x86\x5a\xf2\x87\xfc\xf8\xee\xf5\x8c\x1e\x15\x9f\x07\x56\x78\x8a\x6c\xf5\x61\x3b\xaf\x9a\xfd\x02\x1c\x59\x64\x21\x30\xed\x9c\x9b\xd1\x53\x7f\xa0\x17\x3b\x26\xd0\x9a\xb3\xb1\x44\x97\x60\x14\xfd\xf0\x64\x13\x92\x7d\xd1\x38\x96\x74\x37\xd1\xf7\x90\x6d\xab\x4d\x97\x71\xd6\xfb\x89\x7e\x00\xed\x8e\x75\xac\xbd\x9d\x68\x3a\xa5\xe5\x21\xf7\xac\x0f\x13\x55\xd8\x3e\xb4\x97\x72\x33\x27\x88\x5d\xd4\x16\x15\x87\xb4\xc9\x47\xb1\xf0\xdd\xab\x13\x69\x14\x7d\xc3\x62\x8d\xb0\x83\x96\xbf\x3b\xf9\xd7\xfe\x23\xc5\xea\xb9\x2c\x56\x37\x6f\x65\x3d\xac\xd9\x83\xe6\xe3\x5d\xf2\xff\xbb\x57\x75\xec\x58\x96\xa7\x29\x7a\x75\xfd\x57\xe8\x7e\x02\x00\x00\xff\xff\x0c\x35\xef\x00\x72\x01\x00\x00")

func vimConfigsNetrwVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsNetrwVimrc,
		"vim-configs/netrw.vimrc",
	)
}

func vimConfigsNetrwVimrc() (*asset, error) {
	bytes, err := vimConfigsNetrwVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/netrw.vimrc", size: 370, mode: os.FileMode(436), modTime: time.Unix(1451232132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsReopenVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8c\x31\x0e\xc2\x30\x10\x04\x7b\xbf\x62\xb1\x50\x48\xe8\xe8\x81\x82\x17\x20\x6a\x9a\x13\x39\x27\x87\x9c\xbb\x28\xb1\x05\x05\x8f\xc7\x11\x69\x68\x56\x9a\xd1\x68\x9d\x47\xb0\x09\x13\xdb\xc8\x5a\xe0\x99\x87\x11\xc9\x90\x7a\x46\xa4\x39\x61\xb4\x59\x92\x98\xe2\xd5\xb3\xae\x9d\x68\x07\x42\x90\xc8\x4e\x02\x7a\x9a\x6b\x4f\x39\xd9\x63\x68\x7d\xe3\x00\xca\xb8\xe4\x70\x63\x6a\xaf\x56\x1e\xf6\x28\x51\x14\xe5\xda\xef\xee\xde\x37\x38\xe3\x80\xaa\xfa\x53\xc7\xd3\x8a\xdb\x02\x1f\xf0\x9b\xe1\xd5\xa6\x81\xe2\x06\xdd\x92\x2c\x52\x5b\x09\xee\xb7\xdf\x00\x00\x00\xff\xff\x6e\xce\x4c\x36\xb7\x00\x00\x00")

func vimConfigsReopenVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsReopenVimrc,
		"vim-configs/reopen.vimrc",
	)
}

func vimConfigsReopenVimrc() (*asset, error) {
	bytes, err := vimConfigsReopenVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/reopen.vimrc", size: 183, mode: os.FileMode(436), modTime: time.Unix(1451224119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsTagbarVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x52\x70\x28\x4a\x2d\x2c\xcd\x2c\x4a\x55\x48\xcf\x2c\xc9\x28\x4d\xd2\x4b\xce\xcf\xd5\xcf\x4d\xcc\x2a\x2d\x29\x2e\x2d\xce\xc8\xd4\x2f\x49\x4c\x4f\x4a\x2c\xe2\x52\xe2\xca\xcb\x4d\x2c\x50\xb0\x71\xb3\xb0\x53\xb0\x0a\x01\x8b\x85\xe4\xa7\xa7\xe7\xa4\xda\x38\x07\xd9\x71\x01\x02\x00\x00\xff\xff\x2a\x79\xbc\x9f\x46\x00\x00\x00")

func vimConfigsTagbarVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsTagbarVimrc,
		"vim-configs/tagbar.vimrc",
	)
}

func vimConfigsTagbarVimrc() (*asset, error) {
	bytes, err := vimConfigsTagbarVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/tagbar.vimrc", size: 70, mode: os.FileMode(436), modTime: time.Unix(1451232233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsTaglistVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x41\x6b\xf2\x40\x10\xbd\xe7\x57\x2c\x39\x7d\xdf\x41\xd0\x9e\x4a\x31\x82\x04\xad\x85\x8a\xa5\x49\xf1\xb8\xac\x71\x1a\x87\x4e\x66\x42\x76\x43\xb4\xbf\xbe\x1b\x8b\xd6\x4d\x7b\x09\xe1\xbd\x79\x6f\xde\xcb\x24\x56\xef\xd2\x28\x67\x4a\x42\xeb\xd4\xbf\x5d\x8b\xe4\x90\xff\x47\xb1\x8a\x62\x02\xa7\xf2\x1e\xd7\x99\x34\x4e\xe7\xa7\x1a\x92\x98\x4d\x05\x71\xf4\x43\xbd\x59\xd0\xaf\x58\x1e\x9c\xde\x22\xef\xa5\x4b\x26\x37\x64\x2a\x55\x6d\xbc\x74\x29\x4d\x65\x5c\x40\x2d\x8e\xfd\x73\xc3\x74\xba\xea\x6e\x16\x2e\x91\xc0\xab\x68\xaf\xe7\xad\x13\x9d\x92\x58\x48\xc6\xb7\x13\x0b\x36\xbb\xcb\x4c\x2a\xd4\x56\x1c\x3a\x64\x07\xe9\xf4\x1a\xb8\x0d\xe1\xb5\x39\x66\xed\xae\xc7\xf5\x93\x83\xca\x26\x93\xf1\x80\xd6\xb9\x29\xf5\x33\x70\xe9\x0e\xc9\x5d\x40\xf6\x55\x33\xe4\x92\x20\x25\x2c\x3e\xc2\x3c\xe7\x9c\x9b\x1a\x38\x84\xcf\xc9\x7d\x4d\x9d\x01\x41\xe1\x42\xf2\xcf\x96\x41\xdc\x47\x83\xbc\x94\xa2\xb5\xbd\x45\x2e\xa5\xdf\xfd\x7b\xc7\x4b\x23\x05\x58\xfb\x6d\x37\xa7\xce\x9c\x6c\xe8\xe2\xbf\xf0\x0a\xfa\x1b\x0d\xda\x7a\x7c\x8b\x7b\xdf\x73\x72\x3f\xec\xb9\x92\x06\x3f\x2f\x27\xf5\x22\x35\x27\x34\xf6\xfa\xa3\xf8\xd7\x74\x44\x11\x57\xa6\x56\xd3\x74\x94\x8d\x68\xa6\x1e\xce\xea\x69\xd1\xcc\x3c\xd2\xcd\xba\xe8\x2b\x00\x00\xff\xff\xaa\xb3\x4e\xe9\x5c\x02\x00\x00")

func vimConfigsTaglistVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsTaglistVimrc,
		"vim-configs/taglist.vimrc",
	)
}

func vimConfigsTaglistVimrc() (*asset, error) {
	bytes, err := vimConfigsTaglistVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/taglist.vimrc", size: 604, mode: os.FileMode(436), modTime: time.Unix(1451229041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsTagsVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x2a\x4e\x2d\x51\x28\x49\x4c\x2f\xb6\x05\x11\xd6\x60\x6e\x62\x69\x49\x7e\x72\x46\x4a\x66\x11\x17\x97\x92\x82\x63\x4e\x66\x62\x31\x48\x85\x42\x71\x6a\x4e\x6a\x72\x49\x7e\x91\x02\x90\xef\xac\xeb\xc3\x95\x97\x9b\x58\xa0\x60\xe3\xac\x1b\xac\x9b\x67\xa7\x60\x55\x52\xac\x60\x93\xac\x5b\x64\x67\x9b\x5a\x51\x90\x98\x97\xa2\xa1\x64\x93\x5c\x9e\x5f\x94\x62\xa7\xa4\x69\x93\x5c\x64\x07\xc2\x5c\x80\x00\x00\x00\xff\xff\xa8\x29\x51\x02\x6c\x00\x00\x00")

func vimConfigsTagsVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsTagsVimrc,
		"vim-configs/tags.vimrc",
	)
}

func vimConfigsTagsVimrc() (*asset, error) {
	bytes, err := vimConfigsTagsVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/tags.vimrc", size: 108, mode: os.FileMode(436), modTime: time.Unix(1451224119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vimConfigsYcmVimrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x41\x8f\xd3\x30\x10\x85\xef\xf9\x15\x43\x38\xe4\x42\xe2\x7b\xd5\x56\x88\x02\x12\x48\x7b\x2a\x20\xad\x10\xaa\x1c\x67\xea\x8e\xea\x78\x8c\x3d\x6e\x29\x07\x7e\x3b\x4e\xb7\x82\x6e\x59\xb4\x17\xcb\xf3\xf4\xbd\xe7\x67\x4d\x0d\xaf\x23\x7e\xcf\x14\x71\x06\x96\x64\x97\xfb\xce\xf0\xa8\xbe\x68\xe7\x38\x92\x51\xf7\x9c\x57\x3c\x06\x87\x82\x77\x58\xd5\xd5\xc4\x67\xdf\x26\x13\x29\x48\x99\x5e\xbe\x50\x3d\x79\xd5\xeb\xb4\x2b\x93\x19\xe0\x97\xea\x0e\x34\xaa\x3e\xfb\xc1\xe1\xad\x1d\x3a\x45\x3e\x49\x09\xef\xc2\x09\xa0\x6d\x8d\xd3\xde\xb6\xe6\x82\xc4\xa2\x58\x36\x3c\xe0\x23\xa9\x9c\xfe\xaf\x30\x55\x40\x3f\xfc\xa9\x50\x15\xe1\x7e\x75\x07\x09\x45\xc8\xdb\x54\x15\x0a\xec\xec\x64\xc6\xcd\x1e\x4f\x1b\x47\x49\x36\x09\x1d\x1a\xd9\x5c\x32\x88\x3d\x2c\xe0\x6b\x33\x17\xdd\x2f\x9b\x57\xd0\xcc\x4d\x1b\x96\xcd\xb7\xa7\x9c\x21\xe2\x81\x38\xa7\x7f\xbc\x69\x47\x5b\x69\xaf\x12\xd2\x53\x19\xe4\x0f\xbc\xc7\xc7\xe6\x66\xbe\x6a\xd7\x41\x1b\x5c\x36\x53\xf7\x4f\x91\xac\x2d\xff\x34\xec\xb7\x64\x73\xd4\x13\xd6\xc1\x5b\x06\xcf\x02\x39\x21\x9c\x7b\x02\x6d\xe1\xc4\x79\x12\x8a\x69\x27\x12\xd2\x4c\xa9\x67\x57\xd6\x15\xf8\xa1\xd2\x67\x27\xb4\xf6\x14\xd2\xbb\x1f\x41\xfb\xe1\xf2\xec\xa2\x3e\xa7\xd7\xd5\x0d\xf4\x31\x8f\xe1\x3d\xc7\xa3\x8e\x57\xa4\x69\xff\x43\xbe\xd1\x66\x7f\x8b\xfe\x5c\x9e\x57\xf3\xe1\xa1\xf6\x51\x7b\x81\xab\x0e\x03\x09\x08\x43\x0a\xae\x5c\x0a\x10\xe1\x48\x7e\xe0\x63\x77\x1b\x3f\x91\xeb\x89\x5a\xd4\x07\x8c\x42\x46\xbb\xba\xfa\x1d\x00\x00\xff\xff\x2f\x73\x69\xc2\xb6\x02\x00\x00")

func vimConfigsYcmVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vimConfigsYcmVimrc,
		"vim-configs/ycm.vimrc",
	)
}

func vimConfigsYcmVimrc() (*asset, error) {
	bytes, err := vimConfigsYcmVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim-configs/ycm.vimrc", size: 694, mode: os.FileMode(436), modTime: time.Unix(1451237690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vim-configs/airline.vimrc": vimConfigsAirlineVimrc,
	"vim-configs/common.vimrc": vimConfigsCommonVimrc,
	"vim-configs/copy_n_paste.vimrc": vimConfigsCopy_n_pasteVimrc,
	"vim-configs/go.vimrc": vimConfigsGoVimrc,
	"vim-configs/netrw.vimrc": vimConfigsNetrwVimrc,
	"vim-configs/reopen.vimrc": vimConfigsReopenVimrc,
	"vim-configs/tagbar.vimrc": vimConfigsTagbarVimrc,
	"vim-configs/taglist.vimrc": vimConfigsTaglistVimrc,
	"vim-configs/tags.vimrc": vimConfigsTagsVimrc,
	"vim-configs/ycm.vimrc": vimConfigsYcmVimrc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"vim-configs": &bintree{nil, map[string]*bintree{
		"airline.vimrc": &bintree{vimConfigsAirlineVimrc, map[string]*bintree{}},
		"common.vimrc": &bintree{vimConfigsCommonVimrc, map[string]*bintree{}},
		"copy_n_paste.vimrc": &bintree{vimConfigsCopy_n_pasteVimrc, map[string]*bintree{}},
		"go.vimrc": &bintree{vimConfigsGoVimrc, map[string]*bintree{}},
		"netrw.vimrc": &bintree{vimConfigsNetrwVimrc, map[string]*bintree{}},
		"reopen.vimrc": &bintree{vimConfigsReopenVimrc, map[string]*bintree{}},
		"tagbar.vimrc": &bintree{vimConfigsTagbarVimrc, map[string]*bintree{}},
		"taglist.vimrc": &bintree{vimConfigsTaglistVimrc, map[string]*bintree{}},
		"tags.vimrc": &bintree{vimConfigsTagsVimrc, map[string]*bintree{}},
		"ycm.vimrc": &bintree{vimConfigsYcmVimrc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

